##Copyright 2009-2015 Thomas Paviot (tpaviot@gmail.com)
##
##This file is part of pythonOCC.
##
##pythonOCC is free software: you can redistribute it and/or modify
##it under the terms of the GNU Lesser General Public License as published by
##the Free Software Foundation, either version 3 of the License, or
##(at your option) any later version.
##
##pythonOCC is distributed in the hope that it will be useful,
##but WITHOUT ANY WARRANTY; without even the implied warranty of
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##GNU Lesser General Public License for more details.
##
##You should have received a copy of the GNU Lesser General Public License
##along with pythonOCC.  If not, see <http://www.gnu.org/licenses/>.

from OCC.BRepAlgoAPI import BRepAlgoAPI_Cut
from OCC.BRepPrimAPI import BRepPrimAPI_MakeBox, BRepPrimAPI_MakeSphere
from OCC.Display.SimpleGui import init_display
from OCC.Geom import Geom_Transformation
from OCC.MeshVS import MeshVS_Mesh, MeshVS_MeshPrsBuilder
from OCC.SMESH import SMESH_Gen, SMESH_MeshVSLink
from OCC.StdMeshers import StdMeshers_Arithmetic1D, StdMeshers_Regular_1D, StdMeshers_QuadranglePreference, \
    StdMeshers_Quadrangle_2D, StdMeshers_Prism_3D
from OCC.gp import gp_Pnt, gp_Trsf, gp_Vec


def create_shape_to_mesh():
    """First create a quasi complex shape

    actually a boolean op between a box and a cylinder

    """
    box = BRepPrimAPI_MakeBox(200, 30, 30).Shape()
    sphere = BRepPrimAPI_MakeSphere(gp_Pnt(150, 20, 20), 80).Shape()
    aShape = BRepAlgoAPI_Cut(box, sphere).Shape()
    return aShape

def generate_volumetric_mesh():
    """ generate a volumic mesh from a TopoDS_Shape

    adds the shape to the viewer
    """
    shape = create_shape_to_mesh()

    aMeshGen = SMESH_Gen()
    aMesh = aMeshGen.CreateMesh(0, True)

    # add meshing hypothesis and algorithms

    # 1D, for edges
    an1DHypothesis = StdMeshers_Arithmetic1D(0, 0, aMeshGen)  # discretization of the wire
    an1DHypothesis.SetLength(5., False)  # the smallest distance between 2 points
    an1DHypothesis.SetLength(10., True)  # the longest distance between 2 points
    an1DAlgo = StdMeshers_Regular_1D(1, 0, aMeshGen)  # interpolation

    # 2D for surfaces, using the vertices generated by the 1D hypothesis
    a2dHypothseis = StdMeshers_QuadranglePreference(2, 0, aMeshGen)  # define the boundary
    a2dAlgo = StdMeshers_Quadrangle_2D(3, 0, aMeshGen)  # the 2D mesh

    # 3D generate a volumic mesh, using the vertices and edges generated by the 1D and 2D hypothesis
    # uncomment the line to use the volumic mesher you want
    a3dHypothesis = StdMeshers_Prism_3D(4, 0, aMeshGen)  # OK
    # a3dHypothesis = StdMeshers_Hexa_3D(4,0,aMeshGen) #OK
    # a3dHypothesis = StdMeshers_CompositeHexa_3D(4,0,aMeshGen) #Ok
    # a3dHypothesis = StdMeshers_RadialPrism_3D(4,0,aMeshGen) # Don't work?

    # Calculate mesh
    aMesh.ShapeToMesh(shape )

    # Assign hyptothesis to mesh
    aMesh.AddHypothesis(shape, 0)
    aMesh.AddHypothesis(shape, 1)
    aMesh.AddHypothesis(shape, 2)
    aMesh.AddHypothesis(shape, 3)
    aMesh.AddHypothesis(shape, 4)

    # Compute mesh
    aMeshGen.Compute(aMesh, aMesh.GetShapeToMesh())

    # Add computed mesh to the viewer
    # MeshVS -> Mesh _V_i_S_ualization
    aDS = SMESH_MeshVSLink(aMesh)
    aMeshVS = MeshVS_Mesh(True)
    DMF = 1  # to wrap!
    MeshVS_BP_Mesh = 5  # To wrap!

    aPrsBuilder = MeshVS_MeshPrsBuilder(aMeshVS.GetHandle(), DMF, aDS.GetHandle(), 0, MeshVS_BP_Mesh)
    aMeshVS.SetDataSource(aDS.GetHandle())
    aMeshVS.AddBuilder(aPrsBuilder.GetHandle(), True)

    # return the input shape and the mesh
    return shape, aMeshVS

if __name__ == "__main__":
    display, start_display, add_menu, add_function_to_menu = init_display()
    context = display.Context

    aShape, aMeshVS = generate_volumetric_mesh()

    context.Display(aMeshVS.GetHandle())
    context.Deactivate(aMeshVS.GetHandle())
    display.DisplayShape(aShape)
    start_display()
